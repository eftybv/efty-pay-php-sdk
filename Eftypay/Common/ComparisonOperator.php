<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common/common.proto

namespace Eftypay\Common;

use UnexpectedValueException;

/**
 * ComparisonOperator sets how a field value is compared with the provided search value.
 *
 * Protobuf type <code>eftypay.common.ComparisonOperator</code>
 */
class ComparisonOperator
{
    /**
     * COMPARISON_OPERATOR_NONE is the default comparison operator (which is zero and not transmitted on the wire).
     *
     * Generated from protobuf enum <code>COMPARISON_OPERATOR_NONE = 0;</code>
     */
    const COMPARISON_OPERATOR_NONE = 0;
    /**
     * EQUALS means the field value has to match the search value.
     *
     * Generated from protobuf enum <code>COMPARISON_OPERATOR_EQUALS = 1;</code>
     */
    const COMPARISON_OPERATOR_EQUALS = 1;
    /**
     * GTE is Greater Than or Equals and means the field value has to be greater than or equals the search value.
     *
     * Generated from protobuf enum <code>COMPARISON_OPERATOR_GTE = 2;</code>
     */
    const COMPARISON_OPERATOR_GTE = 2;
    /**
     * LTE is Less Than or Equals and means the field value has to be less than or equals the search value.
     *
     * Generated from protobuf enum <code>COMPARISON_OPERATOR_LTE = 3;</code>
     */
    const COMPARISON_OPERATOR_LTE = 3;
    /**
     * GT is Greater Than and means the field value has to be greater than the search value.
     *
     * Generated from protobuf enum <code>COMPARISON_OPERATOR_GT = 4;</code>
     */
    const COMPARISON_OPERATOR_GT = 4;
    /**
     * LT is Less Than and means the field value has to be less than the search value.
     *
     * Generated from protobuf enum <code>COMPARISON_OPERATOR_LT = 5;</code>
     */
    const COMPARISON_OPERATOR_LT = 5;
    /**
     * NOT_EQUALS means the field value should not match the search value.
     *
     * Generated from protobuf enum <code>COMPARISON_OPERATOR_NOT_EQUALS = 6;</code>
     */
    const COMPARISON_OPERATOR_NOT_EQUALS = 6;

    private static $valueToName = [
        self::COMPARISON_OPERATOR_NONE => 'COMPARISON_OPERATOR_NONE',
        self::COMPARISON_OPERATOR_EQUALS => 'COMPARISON_OPERATOR_EQUALS',
        self::COMPARISON_OPERATOR_GTE => 'COMPARISON_OPERATOR_GTE',
        self::COMPARISON_OPERATOR_LTE => 'COMPARISON_OPERATOR_LTE',
        self::COMPARISON_OPERATOR_GT => 'COMPARISON_OPERATOR_GT',
        self::COMPARISON_OPERATOR_LT => 'COMPARISON_OPERATOR_LT',
        self::COMPARISON_OPERATOR_NOT_EQUALS => 'COMPARISON_OPERATOR_NOT_EQUALS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

