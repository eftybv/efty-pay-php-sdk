<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: common/common.proto

namespace Eftypay\Common;

use UnexpectedValueException;

/**
 * ConditionOperator sets the operator to use for a conditional search.
 *
 * Protobuf type <code>eftypay.common.ConditionOperator</code>
 */
class ConditionOperator
{
    /**
     * CONDITION_OPERATOR_NONE is the default condition operator (which is zero and not transmitted on the wire).
     *
     * Generated from protobuf enum <code>CONDITION_OPERATOR_NONE = 0;</code>
     */
    const CONDITION_OPERATOR_NONE = 0;
    /**
     * AND means all conditions have to match.
     *
     * Generated from protobuf enum <code>CONDITION_OPERATOR_AND = 1;</code>
     */
    const CONDITION_OPERATOR_AND = 1;
    /**
     * OR means one of the conditions has to match.
     *
     * Generated from protobuf enum <code>CONDITION_OPERATOR_OR = 2;</code>
     */
    const CONDITION_OPERATOR_OR = 2;
    /**
     * NOT means none of the conditions have to match.
     *
     * Generated from protobuf enum <code>CONDITION_OPERATOR_NOT = 3;</code>
     */
    const CONDITION_OPERATOR_NOT = 3;

    private static $valueToName = [
        self::CONDITION_OPERATOR_NONE => 'CONDITION_OPERATOR_NONE',
        self::CONDITION_OPERATOR_AND => 'CONDITION_OPERATOR_AND',
        self::CONDITION_OPERATOR_OR => 'CONDITION_OPERATOR_OR',
        self::CONDITION_OPERATOR_NOT => 'CONDITION_OPERATOR_NOT',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

