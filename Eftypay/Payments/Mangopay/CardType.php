<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: public/payments/mangopay/mangopay.proto

namespace Eftypay\Payments\Mangopay;

use UnexpectedValueException;

/**
 * CardType contains all the supported Mangopay card types a buyer can use.
 * Efty Pay supports credit cards for transactions upto USD 2,500.
 *
 * Protobuf type <code>eftypay.payments.mangopay.CardType</code>
 */
class CardType
{
    /**
     * CARD_TYPE_NONE is the default card type (which is zero and not transmitted on the wire).
     *
     * Generated from protobuf enum <code>CARD_TYPE_NONE = 0;</code>
     */
    const CARD_TYPE_NONE = 0;
    /**
     * CB_VISA_MASTERCARD is for CB, Visa & Mastercard cards.
     *
     * Generated from protobuf enum <code>CB_VISA_MASTERCARD = 1;</code>
     */
    const CB_VISA_MASTERCARD = 1;
    /**
     * AMEX is used for American Express cards.
     *
     * Generated from protobuf enum <code>AMEX = 2;</code>
     */
    const AMEX = 2;
    /**
     * MAESTRO is used for Maestro cards.
     *
     * Generated from protobuf enum <code>MAESTRO = 3;</code>
     */
    const MAESTRO = 3;
    /**
     * BCMC is used for BCMC cards.
     *
     * Generated from protobuf enum <code>BCMC = 4;</code>
     */
    const BCMC = 4;

    private static $valueToName = [
        self::CARD_TYPE_NONE => 'CARD_TYPE_NONE',
        self::CB_VISA_MASTERCARD => 'CB_VISA_MASTERCARD',
        self::AMEX => 'AMEX',
        self::MAESTRO => 'MAESTRO',
        self::BCMC => 'BCMC',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

