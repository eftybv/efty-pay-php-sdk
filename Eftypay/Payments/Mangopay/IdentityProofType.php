<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: public/payments/mangopay/onboarding.proto

namespace Eftypay\Payments\Mangopay;

use UnexpectedValueException;

/**
 * IdentityProofType contains details about the types of documents allowed.
 *
 * Protobuf type <code>eftypay.payments.mangopay.IdentityProofType</code>
 */
class IdentityProofType
{
    /**
     * IDENTITY_TYPE_PROOF_NONE is the default document type (which is zero and not transmitted on the wire).
     *
     * Generated from protobuf enum <code>IDENTITY_TYPE_PROOF_NONE = 0;</code>
     */
    const IDENTITY_TYPE_PROOF_NONE = 0;
    /**
     * PASSPORT means a passport is required.
     *
     * Generated from protobuf enum <code>PASSPORT = 1;</code>
     */
    const PASSPORT = 1;
    /**
     * DRIVING_LICENSE means a driving license is required.
     *
     * Generated from protobuf enum <code>DRIVING_LICENSE = 2;</code>
     */
    const DRIVING_LICENSE = 2;
    /**
     * NATIONAL_IDENTITY_CARD means a national identity card is required.
     *
     * Generated from protobuf enum <code>NATIONAL_IDENTITY_CARD = 3;</code>
     */
    const NATIONAL_IDENTITY_CARD = 3;

    private static $valueToName = [
        self::IDENTITY_TYPE_PROOF_NONE => 'IDENTITY_TYPE_PROOF_NONE',
        self::PASSPORT => 'PASSPORT',
        self::DRIVING_LICENSE => 'DRIVING_LICENSE',
        self::NATIONAL_IDENTITY_CARD => 'NATIONAL_IDENTITY_CARD',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

