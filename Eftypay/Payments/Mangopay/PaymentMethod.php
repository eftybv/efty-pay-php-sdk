<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: public/payments/mangopay/checkout.proto

namespace Eftypay\Payments\Mangopay;

use UnexpectedValueException;

/**
 * PaymentMethod contains all the available pay-in methods a buyer can use.
 *
 * Protobuf type <code>eftypay.payments.mangopay.PaymentMethod</code>
 */
class PaymentMethod
{
    /**
     * PAYMENT_METHOD_NONE is the default checkout status (which is zero and not transmitted on the wire).
     *
     * Generated from protobuf enum <code>PAYMENT_METHOD_NONE = 0;</code>
     */
    const PAYMENT_METHOD_NONE = 0;
    /**
     * BANK_WIRE means a pay-in by bank wire.
     *
     * Generated from protobuf enum <code>BANK_WIRE = 1;</code>
     */
    const BANK_WIRE = 1;
    /**
     * CARD means a pay-in by credit or debit card.
     *
     * Generated from protobuf enum <code>CARD = 2;</code>
     */
    const CARD = 2;
    /**
     * IDEAL means a pay-in via iDEAL.
     *
     * Generated from protobuf enum <code>IDEAL = 3;</code>
     */
    const IDEAL = 3;
    /**
     * PAY_PAL means a pay-in via PayPal.
     *
     * Generated from protobuf enum <code>PAY_PAL = 4;</code>
     */
    const PAY_PAL = 4;

    private static $valueToName = [
        self::PAYMENT_METHOD_NONE => 'PAYMENT_METHOD_NONE',
        self::BANK_WIRE => 'BANK_WIRE',
        self::CARD => 'CARD',
        self::IDEAL => 'IDEAL',
        self::PAY_PAL => 'PAY_PAL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

