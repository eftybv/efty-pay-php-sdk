<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: public/transactions/transactions_service.proto

namespace GPBMetadata\PBPublic\Transactions;

class TransactionsService
{
    public static $is_initialized = false;

    public static function initOnce() {
        $pool = \Google\Protobuf\Internal\DescriptorPool::getGeneratedPool();

        if (static::$is_initialized == true) {
          return;
        }
        \GPBMetadata\Common\Common::initOnce();
        \GPBMetadata\Common\Encrypt::initOnce();
        \GPBMetadata\Google\Api\Annotations::initOnce();
        \GPBMetadata\Google\Protobuf\GPBEmpty::initOnce();
        \GPBMetadata\PBPublic\Transactions\Transaction::initOnce();
        \GPBMetadata\PBPublic\Transactions\Activity\Activity::initOnce();
        \GPBMetadata\Includes\ProtocGenOpenapiv2\Openapiv2Annotations::initOnce();
        $pool->internalAddGeneratedFile(
            '
ﬂ3
.public/transactions/transactions_service.protoeftypay.transactionscommon/encrypt.protogoogle/api/annotations.protogoogle/protobuf/empty.proto%public/transactions/transaction.proto+public/transactions/activity/activity.proto9includes/protoc-gen-openapiv2/openapiv2-annotations.proto2í0
Transactionsµ
CreateTransaction(.eftypay.transactions.TransactionRequest!.eftypay.transactions.Transaction"“Ç”‰ì"/transactions:*íA∂Create transactionsûCreate transaction creates a new transaction and returns the Transaction object. The initial status of the transaction is set to TRANSACTION_STATUS_INITIATED.å
UpdateTransaction(.eftypay.transactions.TransactionRequest!.eftypay.transactions.Transaction"©Ç”‰ì/transactions:*íAçUpdate transactionˆUpdate transaction updates an existing transaction and returns the Transaction object. Note that the whole transaction object needs to be provided, and all writeable values are overwritten. Every update to a transaction results in a TransactionActivity record being created for this transaction, so all changes are record and accessible in the audit log for the transaction.»
$PushTransactionToNextAvailableStatusA.eftypay.transactions.PushTransactionToNextAvailableStatusRequest!.eftypay.transactions.Transaction"πÇ”‰ì/transactions/status:*íAñ)Push transaction to next available statusËPush transaction to next available status pushes the status of a transaction status into it\'s next available status & sub-status, and allows for adding additional messaging / details. The method returns the whole transaction object.ÿ
ListTransactions-.eftypay.transactions.ListTransactionsRequest!.eftypay.transactions.Transaction"ÔÇ”‰ì"/transactions/list:*íAŒList transactions∏List transactions lists all the transactions for the integrator. In addition, the ListRequest object can be used to list transactions for a specific buyer, seller, status, amount, etc.0ø
GetTransactionById.eftypay.common.Id!.eftypay.transactions.Transaction"rÇ”‰ì/transactions/id/{id}íARGet transaction by ID9Get transaction by ID gets an existing transaction by ID.˚
CancelTransaction(.eftypay.transactions.TransactionRequest.google.protobuf.Empty"£Ç”‰ì/transactions/cancel:*íAÄCancel transactionjCancel transaction cancels an existing transaction, by setting the status to TRANSACTION_STATUS_CANCELLED.¿
DeleteTransaction(.eftypay.transactions.TransactionRequest.google.protobuf.Empty"ËÇ”‰ì*/transactions:*íAÃDelete transactionµDelete transaction deletes an existing transaction. Please note that this method is irreversible, and can only be executed for transactions with status TRANSACTION_STATUS_INITIATED.∞
SendTransactionMagicLinkEmail1.eftypay.transactions.TransactionMagicLinkPayload2.eftypay.transactions.TransactionMagicLinkResponse"ßÇ”‰ì#"/transactions/magliclink/email:*íA˙Send transaction magic link⁄Send transaction magic link sends an email with an encrypted magic email to the buyer and/or seller of a transaction. Clicking this link will grant the user access to certain transaction details in the Efty Pay portal.â
-VerifyEncryptedMagicLinkAndSendOtpEmailPublic:.eftypay.transactions.TransactionMagicLinkEncryptedPayload.google.protobuf.Empty"ÉÇ”‰ì*"%/transactions/public/magiclink/verify:*íAœ.Verify encrypted magic link and send OTP emailúVerify encrypted magic link and send OTP email, takes the encrypted payload from a magic link, validates it in the backend. And sends an OTP email if valid.Ú
AuthenticateWithOtpPublic:.eftypay.transactions.TransactionMagicLinkEncryptedPayload.eftypay.common.ReturnString"˙Ç”‰ì4"//transactions/public/magiclink/otp/authenticate:*íAºAuthenticate with OTP¢Authenticate with OTP, takes the encrypted payload from a magic link, and OTP, and if valid will return a temporary JWT to access certain protected API resources.æ
GetStatusChangeConfiguration.google.protobuf.EmptyC.eftypay.transactions.activity.GetStatusChangeConfigurationResponse"¿Ç”‰ì$"/transactions/status/configurationíAíGet status change configurationoGet status change configuration returns an overview of which status & sub-status can be set by which user type.≈
!GetNextPossibleStatusAndSubStatus>.eftypay.transactions.GetNextPossibleStatusAndSubStatusRequest2.eftypay.transactions.activity.TransactionActivity"´Ç”‰ì/transactions/status/nextíAÜ\'Get next possible status and sub-status[Get next possible status and sub-status returns the next possible status for a transaction.æ
ReRunWhoisForDomainTransaction.eftypay.common.Id!.eftypay.transactions.Transaction"‰Ç”‰ì"/transactions/whois:*íA¬#Re-run WHOIS for domain transactionöRe-run WHOIS for domain transaction reruns the WHOIS query for a domain in a transaction, and returns the updated transaction record with new WHOIS entry.®
GetTransactionWithEncryptPublic$.eftypay.common.EncryptedLinkRequest!.eftypay.transactions.Transaction"ªÇ”‰ì/transactions/public/encíAó%Get transaction with encrypt (public)nGet transaction with encrypt, gets an existing transaction based on ID provided in the encrypted link payload.“
"UpdateTransactionWithEncryptPublic?.eftypay.transactions.UpdateTransactionWithEncryptPublicRequest!.eftypay.transactions.Transaction"«Ç”‰ì/transactions/public/enc:*íA†(Update transaction with encrypt (public)tUpdate transaction with encrypt, updates an existing transaction based on ID provided in the encrypted link payload.∆
(SendTransactionMagicLinkEmailBuyerPublic$.eftypay.common.EncryptedLinkRequest2.eftypay.transactions.TransactionMagicLinkResponse"øÇ”‰ì-"(/transactions/public/magiclink/email/enc:*íAà-Send transaction magic link to buyer (public)÷Send transaction magic link to buyer, sends an email with an encrypted magic email to the buyer of a transaction. Clicking this link will grant the user access to certain transaction details in the Efty Pay portal.Æ
UpdateTransactionMetaData6.eftypay.transactions.UpdateTransactionMetaDataRequest!.eftypay.transactions.Transaction"µÇ”‰ì/transactions/metaData:*íAêUpdate transaction meta datapUpdate transaction meta data updates the transaction meta-data. Note that the whole meta-data object is updated.ôíAïíThe Transactions service allows for management of transactions within the Efty Pay backend. Transaction methods are only available to integrators.BôZ@bitbucket.org/eftypay/efty-pay-models/sdk/go/public/transactionsíATR
Efty Pay - Transactions API".
Efty Payhttps://efty.comsupport@efty.com21.0bproto3'
        , true);

        static::$is_initialized = true;
    }
}

